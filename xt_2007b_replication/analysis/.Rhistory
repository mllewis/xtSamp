t3.f$Answer.Qproper3 == 1 & t3.f$Answer.Qsub1 == 1 &
t3.f$Answer.Qsub2 == 1 & t3.f$Answer.Qbasic1 == 1 &
t3.f$Answer.Qbasic2 == 1 & t3.f$Answer.Qbasic3 == 1
} else {
basic <- t3.f$Answer.Qproper1 == 1 & t3.f$Answer.Qproper2 == 1 &
t3.f$Answer.Qproper3 == 1 & t3.f$Answer.Qsub1 == 1 &
t3.f$Answer.Qsub2 == 1 & (t3.f$Answer.Qbasic1 == 1 |
t3.f$Answer.Qbasic2 == 1 | t3.f$Answer.Qbasic3 == 1)
}
t3.f$w.ans.cat <- "other"
t3.f$w.ans.cat[sub] <- "sub"
t3.f$w.ans.cat[basic] <- "basic"
if (proper){
proper <- (t3.f$Answer.Qproper1 == 1 & t3.f$Answer.Qproper2 == 1 &
t3.f$Answer.Qproper3 == 1) & t3.f$Answer.Qsub1 == 0 &
t3.f$Answer.Qsub2 == 0 & t3.f$Answer.Qbasic1 == 0 &
t3.f$Answer.Qbasic2 == 0 & t3.f$Answer.Qbasic3 == 0
t3.f$w.ans.cat[proper] <- "proper"
t3.f$w.ans.cat = factor(t3.f$w.ans.cat, levels=c("proper", "sub", "basic", "other"))
} else {
t3.f$w.ans.cat = factor(t3.f$w.ans.cat, levels=c("sub", "basic", "other"))
}
# filter out "other"" responses
length(which(t3.f$w.ans.cat == "other"))
t3.f = t3.f[t3.f$w.ans.cat != "other",]
t3.f$w.ans.cat = droplevels(t3.f$w.ans.cat)
# get proportions and bootstrapped CIS
M <- data.frame()
for (k in 1:length(levels(t3.f$w.ans.cat))){
M = rbind(M, ddply(t3.f, .(Answer.sample),
function (d) {get.prop.CIs(d$w.ans.cat, levels(d$w.ans.cat)[k])}))
}
t3.f.props = t3.f %>%
group_by(Answer.sample, w.ans.cat) %>%
summarise (n = n()) %>%
mutate(prop = n / sum(n),
exp = "Turk #3") %>%
left_join(M)
```
```{r}
ggplot(t3.f.props, aes(x=factor(w.ans.cat), y=prop, fill=Answer.sample)) +
geom_bar(stat="identity", position=position_dodge()) +
geom_linerange(aes(ymin=ciwl,ymax=ciul), position=position_dodge(.9)) +
ylim(0,1) +
ylab("Prop. participants") +
xlab("Generalization pattern") +
ggtitle("Turk Replication #3") +
themeML +
theme(legend.position=c(.85,.8)) +
scale_fill_brewer(name="Sampling\nCondition", palette="Set1")
```
Stats
```{r}
t3_tab = table(t3.f$w.ans.cat, t3.f$Answer.sample)[c("sub", "basic"),]
chisq.test(t3_tab)
```
<a name="all"/>
<h3> All experiments </h3>
```{r, fig.width = 10, echo = F}
# bind all props together
lf.props = rbind(t1.f.props, t2.f.props, t3.f.props, l1.f.props)
lf.props$ps.boot <- NULL
all.props= rbind(lf.props, xt.a.props)
all.props$exp <- ordered(as.factor(all.props$exp),
levels = c( "X&T (2007b) adults", "Turk #1",
"Turk #2", "In Lab", "Turk #3"))
all.props$exp = revalue(all.props$exp, c("X&T (2007b) adults" = "X&T (2007b)", "Turk #1" = "Exp. 1",
"Turk #2" = "Exp. 2", "In Lab" = "Exp. 3", "Turk #3" = "Exp. 4"))
all.props
lf.props = rbind(t1.f.props, t2.f.props, t3.f.props, l1.f.props)
lf.props$ps.boot <- NULL
all.props= rbind(lf.props, xt.a.props)
all.props
all.props$exp <- ordered(as.factor(all.props$exp),
levels = c( "X&T (2007b)", "Turk #1",
"Turk #2", "In Lab", "Turk #3"))
all.props
all.props$exp = revalue(all.props$exp, c("X&T (2007b)" = "X&T (2007b)", "Turk #1" = "Exp. 1",
"Turk #2" = "Exp. 2", "In Lab" = "Exp. 3", "Turk #3" = "Exp. 4"))
all.props
pdf("../../writeup/figures/FIG_2.pdf", height = 4, width = 12)
ggplot(all.props[all.props$w.ans.cat == "basic" | all.props$w.ans.cat == "sub.",],
aes(x=w.ans.cat, y=prop, fill = Answer.sample)) +
geom_bar(stat="identity", position=position_dodge()) +
geom_linerange(aes(ymin=ciwl,ymax=ciul), position=position_dodge(.9)) +
facet_grid(. ~ exp) +
ylim(0, 1) +
ylab("Prop. Participants") +
xlab("Generalization Pattern") +
themeML +
scale_fill_brewer(name="Sampling\nCondition", palette="Set1")
dev.off()
```{r}
N = 14
N_per_condition = N/2 # 7/condition
prop_sub_teacher= .928
n_sub_teacher = round(prop_sub_teacher * N_per_condition)
n_basic_teacher = N_per_condition - n_sub_teacher
teacher_xt_data = as.factor(c(rep("sub", n_sub_teacher),
rep("basic", n_basic_teacher)))
prop_sub_learner = .357
n_sub_learner = round(prop_sub_learner * N_per_condition)
n_basic_learner= N_per_condition - n_sub_learner
learner_xt_data = as.factor(c(rep("sub", n_sub_learner),
rep("basic", n_basic_learner)))
xt_data.adults = data.frame(response=c(as.character(teacher_xt_data),
as.character(learner_xt_data)))
xt_data.adults$Answer.sample[1:N_per_condition] = "teacher"
xt_data.adults$Answer.sample[(N_per_condition+1):
N] = "learner"
xt_data.adults
xt.data
xt
```{r, echo = F}
xt = rbind(xt.c.props, xt.a.props)
xt$exp = revalue(xt$exp,c("X&T (2007b) children" = "children",
"X&T (2007b)" = "adults"))
# re-order levels so consistent with other exps
xt$Answer.sample <- ordered(xt$Answer.sample,
levels = c("teacher", "learner"))
ggplot(xt, aes(x=factor(w.ans.cat), y=prop, fill=Answer.sample)) +
facet_grid(. ~ exp) +
geom_bar(stat="identity", position=position_dodge()) +
geom_linerange(aes(ymin=ciwl,ymax=ciul), position=position_dodge(.9)) +
ylim(0,1) +
ylab("Prop. participants") +
xlab("Generalization pattern") +
scale_fill_brewer(name="Sampling\nCondition", palette="Set1") +
ggtitle("Original Xu and Tenenbaum Data") +
themeML
```
xt
<a name="o"/>
<h3> Original Xu and Tenenbaum 2007b </h3>
X&T 2007b data - adults
```{r}
N = 14
N_per_condition = N/2 # 7/condition
prop_sub_teacher= .928
n_sub_teacher = round(prop_sub_teacher * N_per_condition)
n_basic_teacher = N_per_condition - n_sub_teacher
teacher_xt_data = as.factor(c(rep("sub", n_sub_teacher),
rep("basic", n_basic_teacher)))
prop_sub_learner = .357
n_sub_learner = round(prop_sub_learner * N_per_condition)
n_basic_learner= N_per_condition - n_sub_learner
learner_xt_data = as.factor(c(rep("sub", n_sub_learner),
rep("basic", n_basic_learner)))
xt_data.adults = data.frame(response=c(as.character(teacher_xt_data),
as.character(learner_xt_data)))
xt_data.adults$Answer.sample[1:N_per_condition] = "teacher"
xt_data.adults$Answer.sample[(N_per_condition+1):
N] = "learner"
# get proportions and bootstrapped CIS
M <- data.frame()
for (k in 1:length(levels(learner_xt_data))){
M = rbind(M, ddply(xt_data.adults, .(Answer.sample),
function (d) {get.prop.CIs(d$response, levels(d$response)[k])}))
}
xt.a.props = M
names(xt.a.props)[names(xt.a.props) == "ps.boot"] = "prop"
xt.a.props$exp ="X&T (2007b)"
# add n's
xt.a.props[xt.a.props$Answer.sample == "teacher" &
xt.a.props$w.ans.cat == "sub", "n" ] = n_sub_teacher
xt.a.props[xt.a.props$Answer.sample == "teacher" &
xt.a.props$w.ans.cat == "basic", "n"] = n_basic_teacher
xt.a.props[xt.a.props$Answer.sample == "learner" &
xt.a.props$w.ans.cat == "sub", "n" ] = n_sub_learner
xt.a.props[xt.a.props$Answer.sample == "learner" &
xt.a.props$w.ans.cat == "basic", "n" ] = n_basic_learner
```
X&T 2007b data - children
```{r}
N = 24
N_per_condition = N/2 # 12/condition
prop_sub_teacher= .71
n_sub_teacher = round(prop_sub_teacher * N_per_condition)
n_basic_teacher = N_per_condition - n_sub_teacher
teacher_xt_data = as.factor(c(rep("sub", n_sub_teacher),
rep("basic", n_basic_teacher)))
prop_sub_learner = .29
n_sub_learner = round(prop_sub_learner * N_per_condition)
n_basic_learner= N_per_condition - n_sub_learner
learner_xt_data = as.factor(c(rep("sub", n_sub_learner),
rep("basic", n_basic_learner)))
xt_data.children = data.frame(response=c(as.character(teacher_xt_data),
as.character(learner_xt_data)))
xt_data.children$Answer.sample[1:N_per_condition] = "teacher"
xt_data.children$Answer.sample[(N_per_condition+1):
N] = "learner"
# get proportions and bootstrapped CIS
M <- data.frame()
for (k in 1:length(levels(learner_xt_data))){
M = rbind(M, ddply(xt_data.children, .(Answer.sample),
function (d) {get.prop.CIs(d$response, levels(d$response)[k])}))
}
xt.c.props = M
names(xt.c.props)[names(xt.c.props) == "ps.boot"] = "prop"
xt.c.props$exp ="X&T (2007b) children"
# add n's
xt.c.props[xt.c.props$Answer.sample == "teacher" &
xt.c.props$w.ans.cat== "sub", "n" ] = n_sub_teacher
xt.c.props[xt.c.props$Answer.sample == "teacher" &
xt.c.props$w.ans.cat== "basic", "n"] = n_basic_teacher
xt.c.props[xt.c.props$Answer.sample == "learner" &
xt.c.props$w.ans.cat== "sub", "n" ] = n_sub_learner
xt.c.props[xt.c.props$Answer.sample == "learner" &
xt.c.props$w.ans.cat== "basic", "n" ] = n_basic_learner
```
```{r, echo = F}
xt = rbind(xt.c.props, xt.a.props)
xt$exp = revalue(xt$exp,c("X&T (2007b) children" = "children",
"X&T (2007b)" = "adults"))
# re-order levels so consistent with other exps
xt$Answer.sample <- ordered(xt$Answer.sample,
levels = c("teacher", "learner"))
ggplot(xt, aes(x=factor(w.ans.cat), y=prop, fill=Answer.sample)) +
facet_grid(. ~ exp) +
geom_bar(stat="identity", position=position_dodge()) +
geom_linerange(aes(ymin=ciwl,ymax=ciul), position=position_dodge(.9)) +
ylim(0,1) +
ylab("Prop. participants") +
xlab("Generalization pattern") +
scale_fill_brewer(name="Sampling\nCondition", palette="Set1") +
ggtitle("Original Xu and Tenenbaum Data") +
themeML
```
xt
X&T 2007b data - children
```{r}
N = 24
N_per_condition = (N/2) * 2 # 12/condition
prop_sub_teacher= .71
n_sub_teacher = round(prop_sub_teacher * N_per_condition)
n_basic_teacher = N_per_condition - n_sub_teacher
teacher_xt_data = as.factor(c(rep("sub", n_sub_teacher),
rep("basic", n_basic_teacher)))
X&T 2007b data - adults
```{r}
N = 14
N_per_condition = (N/2) * 2 # 7/condition
prop_sub_teacher= .928
n_sub_teacher = round(prop_sub_teacher * N_per_condition)
n_basic_teacher = N_per_condition - n_sub_teacher
teacher_xt_data = as.factor(c(rep("sub", n_sub_teacher),
rep("basic", n_basic_teacher)))
prop_sub_learner = .357
n_sub_learner = round(prop_sub_learner * N_per_condition)
n_basic_learner= N_per_condition - n_sub_learner
learner_xt_data = as.factor(c(rep("sub", n_sub_learner),
rep("basic", n_basic_learner)))
xt_data.adults = data.frame(response=c(as.character(teacher_xt_data),
as.character(learner_xt_data)))
xt_data.adults$Answer.sample[1:N_per_condition] = "teacher"
xt_data.adults$Answer.sample[(N_per_condition+1):
N] = "learner"
# get proportions and bootstrapped CIS
M <- data.frame()
for (k in 1:length(levels(learner_xt_data))){
M = rbind(M, ddply(xt_data.adults, .(Answer.sample),
function (d) {get.prop.CIs(d$response, levels(d$response)[k])}))
}
xt.a.props = M
names(xt.a.props)[names(xt.a.props) == "ps.boot"] = "prop"
xt.a.props$exp ="X&T (2007b)"
# add n's
xt.a.props[xt.a.props$Answer.sample == "teacher" &
xt.a.props$w.ans.cat == "sub", "n" ] = n_sub_teacher
xt.a.props[xt.a.props$Answer.sample == "teacher" &
xt.a.props$w.ans.cat == "basic", "n"] = n_basic_teacher
xt.a.props[xt.a.props$Answer.sample == "learner" &
xt.a.props$w.ans.cat == "sub", "n" ] = n_sub_learner
xt.a.props[xt.a.props$Answer.sample == "learner" &
xt.a.props$w.ans.cat == "basic", "n" ] = n_basic_learner
```
xt
xt_data.adults
xt_data.adults = data.frame(response=c(as.character(teacher_xt_data),
as.character(learner_xt_data)))
xt_data.adults$Answer.sample[1:N_per_condition] = "teacher"
xt_data.adults$Answer.sample[(N_per_condition+1):
N] = "learner"
# get proportions and bootstrapped CIS
M <- data.frame()
for (k in 1:length(levels(learner_xt_data))){
M = rbind(M, ddply(xt_data.adults, .(Answer.sample),
function (d) {get.prop.CIs(d$response, levels(d$response)[k])}))
}
xt.a.props = M
names(xt.a.props)[names(xt.a.props) == "ps.boot"] = "prop"
xt.a.props$exp ="X&T (2007b)"
xt.a.props
xt_data.adults
prop_sub_teacher= .928
n_sub_teacher = round(prop_sub_teacher * N_per_condition)
n_basic_teacher = N_per_condition - n_sub_teacher
teacher_xt_data = as.factor(c(rep("sub", n_sub_teacher),
rep("basic", n_basic_teacher)))
t_teacher
xt_teacher
teacher_xt_data
X&T 2007b data - adults
```{r}
N = 14
N_per_condition = (N/2) * 2 # 7/condition
prop_sub_teacher= .928
n_sub_teacher = round(prop_sub_teacher * N_per_condition)
n_basic_teacher = N_per_condition - n_sub_teacher
teacher_xt_data = as.factor(c(rep("sub", n_sub_teacher),
rep("basic", n_basic_teacher)))
prop_sub_learner = .357
n_sub_learner = round(prop_sub_learner * N_per_condition)
n_basic_learner= N_per_condition - n_sub_learner
learner_xt_data = as.factor(c(rep("sub", n_sub_learner),
rep("basic", n_basic_learner)))
xt_data.adults = data.frame(response=c(as.character(teacher_xt_data),
as.character(learner_xt_data)))
xt_data.adults$Answer.sample[1:N_per_condition] = "teacher"
xt_data.adults$Answer.sample[(N_per_condition+1):
(N_per_condition*2)] = "learner"
# get proportions and bootstrapped CIS
M <- data.frame()
for (k in 1:length(levels(learner_xt_data))){
M = rbind(M, ddply(xt_data.adults, .(Answer.sample),
function (d) {get.prop.CIs(d$response, levels(d$response)[k])}))
}
xt.a.props = M
names(xt.a.props)[names(xt.a.props) == "ps.boot"] = "prop"
xt.a.props$exp ="X&T (2007b)"
# add n's
xt.a.props[xt.a.props$Answer.sample == "teacher" &
xt.a.props$w.ans.cat == "sub", "n" ] = n_sub_teacher
xt.a.props[xt.a.props$Answer.sample == "teacher" &
xt.a.props$w.ans.cat == "basic", "n"] = n_basic_teacher
xt.a.props[xt.a.props$Answer.sample == "learner" &
xt.a.props$w.ans.cat == "sub", "n" ] = n_sub_learner
xt.a.props[xt.a.props$Answer.sample == "learner" &
xt.a.props$w.ans.cat == "basic", "n" ] = n_basic_learner
```
```{r, echo = F}
xt = rbind(xt.c.props, xt.a.props)
xt$exp = revalue(xt$exp,c("X&T (2007b) children" = "children",
"X&T (2007b)" = "adults"))
# re-order levels so consistent with other exps
xt$Answer.sample <- ordered(xt$Answer.sample,
levels = c("teacher", "learner"))
ggplot(xt, aes(x=factor(w.ans.cat), y=prop, fill=Answer.sample)) +
facet_grid(. ~ exp) +
geom_bar(stat="identity", position=position_dodge()) +
geom_linerange(aes(ymin=ciwl,ymax=ciul), position=position_dodge(.9)) +
ylim(0,1) +
ylab("Prop. participants") +
xlab("Generalization pattern") +
scale_fill_brewer(name="Sampling\nCondition", palette="Set1") +
ggtitle("Original Xu and Tenenbaum Data") +
themeML
```
xt
ggplot(all.props[all.props$w.ans.cat == "basic" | all.props$w.ans.cat == "sub.",],
aes(x=w.ans.cat, y=prop, fill = Answer.sample)) +
geom_bar(stat="identity", position=position_dodge()) +
geom_linerange(aes(ymin=ciwl,ymax=ciul), position=position_dodge(.9)) +
facet_grid(. ~ exp) +
ylim(0, 1) +
ylab("Prop. Participants") +
xlab("Generalization Pattern") +
themeML +
scale_fill_brewer(name="Sampling\nCondition", palette="Set1")
```{r, fig.width = 10, echo = F}
# bind all props together
lf.props = rbind(t1.f.props, t2.f.props, t3.f.props, l1.f.props)
lf.props$ps.boot <- NULL
all.props= rbind(lf.props, xt.a.props)
all.props
all.props$exp <- ordered(as.factor(all.props$exp),
levels = c( "X&T (2007b)", "Turk #1",
"Turk #2", "In Lab", "Turk #3"))
all.props$exp = revalue(all.props$exp, c("X&T (2007b)" = "X&T (2007b)", "Turk #1" = "Exp. 1",
"Turk #2" = "Exp. 2", "In Lab" = "Exp. 3", "Turk #3" = "Exp. 4"))
all.props$w.ans.cat  = revalue(all.props$w.ans.cat , c("sub" = "sub."))
pdf("../../writeup/figures/FIG_2.pdf", height = 4, width = 12)
ggplot(all.props[all.props$w.ans.cat == "basic" | all.props$w.ans.cat == "sub.",],
aes(x=w.ans.cat, y=prop, fill = Answer.sample)) +
geom_bar(stat="identity", position=position_dodge()) +
geom_linerange(aes(ymin=ciwl,ymax=ciul), position=position_dodge(.9)) +
facet_grid(. ~ exp) +
ylim(0, 1) +
ylab("Prop. Participants") +
xlab("Generalization Pattern") +
themeML +
scale_fill_brewer(name="Sampling\nCondition", palette="Set1")
dev.off()
ggplot(all.props[all.props$w.ans.cat == "basic" | all.props$w.ans.cat == "sub.",],
aes(x=w.ans.cat, y=prop, fill = Answer.sample)) +
geom_bar(stat="identity", position=position_dodge()) +
geom_linerange(aes(ymin=ciwl,ymax=ciul), position=position_dodge(.9)) +
facet_grid(. ~ exp) +
ylim(0, 1) +
ylab("Prop. Participants") +
xlab("Generalization Pattern") +
themeML +
scale_fill_brewer(name="Sampling\nCondition", palette="Set1")
---
output: html_document
---
<h2>  Xu and Tenenbaum 2007b Replication </h2>
<h3> Supplementary Information </h3>
***
***
**TABLE OF CONTENTS**<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;**[(1) Xu and Tenenabum 2007b (original)](#o)** <br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;**[(2) Exp. 1 - online](#t1)** <br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;**[(3) Exp. 2 - online](#t2)** <br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;**[(4) Exp. 3 - in person](#l1)** <br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;**[(5) Exp. 4 - online](#t3)** <br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;**[(5) All](#all)** <br/>
This document was created from an R Markdown file. The R Markdown file can be found <a href="https://github.com/mllewis/RC/blob/master/analysis/refComplex_paper_analyses_LF.Rmd" target="_blank"> here</a>. All analyses and plots can be reproduced from the <a href="https://github.com/mllewis/RC/tree/master/data" target="_blank">raw data</a> with the code in this file. This document also contains links to the experimental tasks.
***
***
```{r include = F}
rm(list = ls())
#--Load packages--
library(knitr)
library(boot)
library(ggplot2)
library(plyr)
library(dplyr)
# graphical parameters
fs = 18
ts = 20
get.prop.CIs <- function(d, dv){
prop = sum(d==dv)/length(d)
# bootstrap across subject proportion responses for each category
b <- boot(d, function(u, i) table(u[i])[dv]/length(u), R = 1000)
ci <- boot.ci(b, type = "perc")
ciwl = ci$percent[4]
ciwu = ci$percent[5]
p.CIS <- data.frame(ciwl = ciwl, ciul = ciwu, w.ans.cat = dv, ps.boot = prop)
return (p.CIS)
}
theme_set(theme_bw())
themeML = theme(text = element_text(size=fs),
plot.title=element_text(size=ts, face = "bold"),
plot.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
axis.line = element_line(color = 'black'))
d.fc <- function(response, cond) {
# http://www.meta-analysis.com/downloads/Meta-analysis%20Converting%20among%20effect%20sizes.pdf
#https://www.medcalc.net/tests/odds_ratio.php
response = droplevels(response)
response <- ordered(response, levels = c( "basic", "sub"))
cond <- ordered(cond, levels = c( "learner", "teacher"))
#use odds ratioto calculate d
ns = table(cond, response)
or = (ns[1]*ns[4])/(ns[2]*ns[3])
cf = sqrt(3)/pi
effect_size = log(or) * cf #calculate d
# calculate 95 CI
## parametrically
var_lor = (1/ns[1]) + (1/ns[2]) + (1/ns[3]) + (1/ns[4]) # sampling variance of lor
var_d  = (3/(pi^2)) * var_lor # sampling variance of d
d_err = sqrt(var_d) * 1.96
cill = effect_size - d_err
ciul = effect_size + d_err
es <- data.frame(effect_size = effect_size, cill = cill, ciul = ciul)
return (es)
}
opts_chunk$set(echo = T, message = F, warning = F, error = F, cache = F)
```
There are different possible criteria  for categorizing a participant as a subordinate or basic-level generalizer. X&T find that participants respond consistently across questions as either a subordinate or a basic generalizer for each of the two trials. In contrast, in our sample, we observed a wide variety of responses across questions by participants. Thus, we adopt two criteria in analyzing our data: a "strict" criteria where we only include participants if they responded correctly, and a "non-strict" criteria where we counted a particpant as a basic generalizer if they responded "yes" to any of the basic level questions.
```{r, echo = F}
# include proper generalizations?
strict = FALSE
proper = FALSE # this only affects plots
print(paste("Strict criteria: ", strict))
```
<a name="t1"/>
<h3> Experiment 1 </h3>
Read in data and pre-process.
```{r}
t1 = read.csv("../data/turk_replication_1.csv")
# make factors
t1$Answer.sample <- factor(t1$Answer.sample, labels=c('teacher','learner')) # sample0= teacher, sample1=learner
t1$Answer.label <- factor(t1$Answer.label, labels=c('nolabel','label')) # 0=nolabel, 1=label
t1 <- colwise(as.factor)(t1)
```
Filter.
```{r}
# get number of exclusions by category
t1.exclusion.ns = t1 %>%
summarise(n_noLabelTrials = length(which(Answer.label != 'label')),
n_repeatWorkers = length(which(duplicated(workerid))),
n_badTraining = length(which(Answer.click1 == "\"false\"" |
Answer.click2 == "\"false\"")),
n_badGeneralize = length(which(Answer.Qwcheck != 0)),
n_badFilter = length(which(Answer.question1 == 'FALSE')))
t1.exclusion.ns
# subset data
t1.f = t1 %>%
filter(Answer.label == 'label') %>% #remove nolabel trials (run 4)
filter(!duplicated(workerid)) %>% #participants who completed multiple runs
filter(Answer.click1 == "\"correct\"" &
Answer.click2 == "\"correct\"") %>% #correct training items (learning only)
filter(Answer.Qwcheck == 0)  %>% #check generalization question
filter(Answer.question1 == 'TRUE') #filter question
dim(t1)[1] # total
dim(t1.f)[1] # total with exclusions
```
summary(t1.f)
