filter(Answer.click1 == "\"correct\"" & Answer.click2 == "\"correct\"") %>% # take out those who click on wrong training items
filter(Answer.Qcheck1 == 0 & Answer.Qcheck2 == 0) %>% # take out if missed check generalization question
filter(Answer.question1 == 'TRUE' & Answer.question2 =='TRUE' &
Answer.question3 == 'TRUE' & Answer.question4 =='TRUE')  # take out those who missed filter question
dim(t2)[1] # total
dim(t3.f)[1] # total with exclusions
```
if (criterion == "strict"){
proper <- (t3.f$Answer.Qproper1 == 1 & t3.f$Answer.Qproper2 == 1 &
t3.f$Answer.Qproper3 == 1) & t3.f$Answer.Qsub1 == 0 &
t3.f$Answer.Qsub2 == 0 & t3.f$Answer.Qbasic1 == 0 &
t3.f$Answer.Qbasic2 == 0 & t3.f$Answer.Qbasic3 == 0
sub <-  t3.f$Answer.Qproper1 == 1 & t3.f$Answer.Qproper2 == 1 &
t3.f$Answer.Qproper3 == 1 & t3.f$Answer.Qsub1 == 1 &
t3.f$Answer.Qsub2 == 1 & t3.f$Answer.Qbasic1 == 0 &
t3.f$Answer.Qbasic2 == 0 & t3.f$Answer.Qbasic3 == 0
basic <- t3.f$Answer.Qproper1 == 1 & t3.f$Answer.Qproper2 == 1 &
t3.f$Answer.Qproper3 == 1 & t3.f$Answer.Qsub1 == 1 &
t3.f$Answer.Qsub2 == 1 & t3.f$Answer.Qbasic1 == 1 &
t3.f$Answer.Qbasic2 == 1 & t3.f$Answer.Qbasic3 == 1
} else if (criterion == "x&t") {
sub <-  t3.f$Answer.Qproper1 == 1 & t3.f$Answer.Qproper2 == 1 &
t3.f$Answer.Qproper3 == 1 & t3.f$Answer.Qsub1 == 1 &
t3.f$Answer.Qsub2 == 1 & t3.f$Answer.Qbasic1 == 0 &
t3.f$Answer.Qbasic2 == 0 & t3.f$Answer.Qbasic3 == 0
basic <- t3.f$Answer.Qproper1 == 1 & t3.f$Answer.Qproper2 == 1 &
t3.f$Answer.Qproper3 == 1 & t3.f$Answer.Qsub1 == 1 &
t3.f$Answer.Qsub2 == 1 & t3.f$Answer.Qbasic1 == 1 &
t3.f$Answer.Qbasic2 == 1 & t3.f$Answer.Qbasic3 == 1
}
t3.f$w.ans.cat <- "other"
t3.f$w.ans.cat[sub] <- "sub"
t3.f$w.ans.cat[basic] <- "basic"
#t3.f$w.ans.cat[proper] <- "proper"
#t3.f$w.ans.cat = factor(t3.f$w.ans.cat, levels=c("proper", "sub", "basic", "other"))
t3.f$w.ans.cat = factor(t3.f$w.ans.cat, levels=c("sub", "basic", "other"))
# filter out "other"" responses
length(which(t3.f$w.ans.cat == "other"))
t3.f = t1.f[t3.f$w.ans.cat != "other",]
t3.f$w.ans.cat = droplevels(t3.f$w.ans.cat)
# get proportions and bootstrapped CIS
M <- data.frame()
for (k in 1:length(levels(t3.f$w.ans.cat))){
M = rbind(M, ddply(t3.f, .(Answer.sample),
function (d) {get.prop.CIs(d$w.ans.cat, levels(d$w.ans.cat)[k])}))
}
t3.f.props = t3.f %>%
group_by(Answer.sample, w.ans.cat) %>%
summarise (n = n()) %>%
mutate(prop = n / sum(n),
exp = "Turk #3") %>%
left_join(M)
```
Plot.
```{r, echo=F}
ggplot(t3.f.props, aes(x=factor(w.ans.cat), y=prop, fill=Answer.sample)) +
geom_bar(stat="identity", position=position_dodge()) +
geom_linerange(aes(ymin=ciwl,ymax=ciul), position=position_dodge(.9)) +
ylim(0,1) +
ylab("Prop. participants showing \ngeneralization pattern") +
xlab("Generalization pattern") +
ggtitle("Turk Replication #3") +
themeML +
theme(legend.position=c(.85,.8)) +
scale_fill_discrete(name="Sampling\nCondition")
```
Stats- No difference.
```{r}
t3_tab = table(t3.f$w.ans.cat, t3.f$Answer.sample)[c("sub", "basic"),]
chisq.test(t3_tab)
```
l1 <- read.csv("../data/inlab_replication.csv")
l1 <- read.csv("../data/inlab_replication.csv")
proper <- l1$basic1_a == 0 & l1$basic2_a == 0 &
l1$basic1_b == 0 & l1$basic2_b == 0 &
(l1$sub1_a == 0 | l1$sub2_a == 0 | l1$sub1_b == 0 | l1$sub2_b == 0)
proper
l1 <- read.csv("../data/inlab_replication.csv")
l1$ans.cat <- "other"
l1$ans.cat[sub] <- "sub"
l1$ans.cat[basic] <- "basic"
sub <- l1$basic1_a == 0 & l1$basic2_a == 0 &
l1$basic1_b == 0 & l1$basic2_b == 0 &
(l1$sub1_a == 1 & l1$sub2_a == 1 & l1$sub1_b == 1 & l1$sub2_b == 1)
basic <- (l1$basic1_a == 1 | l1$basic2_a == 1 |
l1$basic1_b == 1 | l1$basic2_b == 1) &
(l1$sub1_a == 1 & l1$sub2_a == 1 & l1$sub1_b == 1 & l1$sub2_b == 1)
l1$ans.cat <- factor(l1$ans.cat,c("sub","basic","other"))
if (proper){
proper <- l1$basic1_a == 0 & l1$basic2_a == 0 &
l1$basic1_b == 0 & l1$basic2_b == 0 &
(l1$sub1_a == 0 | l1$sub2_a == 0 | l1$sub1_b == 0 | l1$sub2_b == 0)
l1$ans.cat[proper] <- "proper"
l1$ans.cat <- factor(l1$ans.cat,c("proper","sub","basic","other"))
}
# filter out "other"" responses
length(which(l1$ans.cat  == "other"))
l1 = l1[l1$ans.cat != "other",]
l1$ans.cat = droplevels(l1$ans.cat)
proper = F
l1 <- read.csv("../data/inlab_replication.csv")
l1$ans.cat <- "other"
l1$ans.cat[sub] <- "sub"
l1$ans.cat[basic] <- "basic"
sub <- l1$basic1_a == 0 & l1$basic2_a == 0 &
l1$basic1_b == 0 & l1$basic2_b == 0 &
(l1$sub1_a == 1 & l1$sub2_a == 1 & l1$sub1_b == 1 & l1$sub2_b == 1)
basic <- (l1$basic1_a == 1 | l1$basic2_a == 1 |
l1$basic1_b == 1 | l1$basic2_b == 1) &
(l1$sub1_a == 1 & l1$sub2_a == 1 & l1$sub1_b == 1 & l1$sub2_b == 1)
l1$ans.cat <- factor(l1$ans.cat,c("sub","basic","other"))
if (proper){
proper <- l1$basic1_a == 0 & l1$basic2_a == 0 &
l1$basic1_b == 0 & l1$basic2_b == 0 &
(l1$sub1_a == 0 | l1$sub2_a == 0 | l1$sub1_b == 0 | l1$sub2_b == 0)
l1$ans.cat[proper] <- "proper"
l1$ans.cat <- factor(l1$ans.cat,c("proper","sub","basic","other"))
}
# filter out "other"" responses
length(which(l1$ans.cat  == "other"))
l1 = l1[l1$ans.cat != "other",]
l1$ans.cat = droplevels(l1$ans.cat)
# get proportions and bootstrapped CIS
M <- data.frame()
for (k in 1:length(levels(l1$ans.cat)){
M = rbind(M, ddply(l1, .(sample),
function (d) {get.prop.CIs(d$ans.cat, levels(d$ans.cat)[k])}))
}
# get proportions and bootstrapped CIS
M <- data.frame()
for (k in 1:length(levels(l1$ans.cat))){
M = rbind(M, ddply(l1, .(sample),
function (d) {get.prop.CIs(d$ans.cat, levels(d$ans.cat)[k])}))
}
l1.props = t3.f %>%
group_by(sample, ans.cat) %>%
summarise (n = n()) %>%
mutate(prop = n / sum(n),
exp = "In Lab") %>%
left_join(M)
```
l1.props = l1 %>%
group_by(sample, ans.cat) %>%
summarise (n = n()) %>%
mutate(prop = n / sum(n),
exp = "In Lab") %>%
left_join(M)
```
l1
l1.props
print.data.fram(l1.props)
print.data.frame(l1.props)
print.data.frame(l1.props)
M
# filter out "other"" responses
length(which(l1$ans.cat  == "other"))
l1 = l1[l1$ans.cat != "other",]
l1$ans.cat = droplevels(l1$ans.cat)
# get proportions and bootstrapped CIS
# get proportions and bootstrapped CIS
M <- data.frame()
for (k in 1:length(levels(l1$ans.cat))){
M = rbind(M, ddply(l1, .(sample),
function (d) {get.prop.CIs(d$ans.cat, levels(d$ans.cat)[k])}))
}
l1.props = l1 %>%
group_by(sample, ans.cat) %>%
summarise (n = n()) %>%
mutate(prop = n / sum(n),
exp = "In Lab") %>%
left_join(M)
```
print.data.fram(l1.props)
print.data.frame(l1.props)
```{r}
l1 <- read.csv("../data/inlab_replication.csv")
l1$ans.cat <- "other"
l1$ans.cat[sub] <- "sub"
l1$ans.cat[basic] <- "basic"
sub <- l1$basic1_a == 0 & l1$basic2_a == 0 &
l1$basic1_b == 0 & l1$basic2_b == 0 &
(l1$sub1_a == 1 & l1$sub2_a == 1 & l1$sub1_b == 1 & l1$sub2_b == 1)
basic <- (l1$basic1_a == 1 | l1$basic2_a == 1 |
l1$basic1_b == 1 | l1$basic2_b == 1) &
(l1$sub1_a == 1 & l1$sub2_a == 1 & l1$sub1_b == 1 & l1$sub2_b == 1)
l1$ans.cat <- factor(l1$ans.cat,c("sub","basic","other"))
if (proper){
proper <- l1$basic1_a == 0 & l1$basic2_a == 0 &
l1$basic1_b == 0 & l1$basic2_b == 0 &
(l1$sub1_a == 0 | l1$sub2_a == 0 | l1$sub1_b == 0 | l1$sub2_b == 0)
l1$ans.cat[proper] <- "proper"
l1$ans.cat <- factor(l1$ans.cat,c("proper","sub","basic","other"))
}
# filter out "other"" responses
length(which(l1$ans.cat  == "other"))
l1 = l1[l1$ans.cat != "other",]
l1$ans.cat = droplevels(l1$ans.cat)
# get proportions and bootstrapped CIS
M <- data.frame()
for (k in 1:length(levels(l1$ans.cat))){
M = rbind(M, ddply(l1, .(sample),
function (d) {get.prop.CIs(d$ans.cat, levels(d$ans.cat)[k])}))
}
l1.props = l1 %>%
group_by(sample, ans.cat) %>%
summarise (n = n()) %>%
mutate(prop = n / sum(n),
exp = "In Lab") %>%
left_join(M)
```
```{r}
l1 <- read.csv("../data/inlab_replication.csv")
l1$w.ans.cat <- "other"
l1$w.ans.cat[sub] <- "sub"
l1$w.ans.cat[basic] <- "basic"
sub <- l1$basic1_a == 0 & l1$basic2_a == 0 &
l1$basic1_b == 0 & l1$basic2_b == 0 &
(l1$sub1_a == 1 & l1$sub2_a == 1 & l1$sub1_b == 1 & l1$sub2_b == 1)
basic <- (l1$basic1_a == 1 | l1$basic2_a == 1 |
l1$basic1_b == 1 | l1$basic2_b == 1) &
(l1$sub1_a == 1 & l1$sub2_a == 1 & l1$sub1_b == 1 & l1$sub2_b == 1)
l1$w.ans.cat <- factor(l1$w.ans.cat,c("sub","basic","other"))
if (proper){
proper <- l1$basic1_a == 0 & l1$basic2_a == 0 &
l1$basic1_b == 0 & l1$basic2_b == 0 &
(l1$sub1_a == 0 | l1$sub2_a == 0 | l1$sub1_b == 0 | l1$sub2_b == 0)
l1$w.ans.cat[proper] <- "proper"
l1$w.ans.cat <- factor(l1$w.ans.cat,c("proper","sub","basic","other"))
}
# filter out "other"" responses
length(which(l1$w.ans.cat  == "other"))
l1 = l1[l1$w.ans.cat != "other",]
l1$w.ans.cat = droplevels(l1$w.ans.cat)
# get proportions and bootstrapped CIS
M <- data.frame()
for (k in 1:length(levels(l1$w.ans.cat))){
M = rbind(M, ddply(l1, .(sample),
function (d) {get.prop.CIs(d$w.ans.cat, levels(d$w.ans.cat)[k])}))
}
l1.props = l1 %>%
group_by(sample, w.ans.cat) %>%
summarise (n = n()) %>%
mutate(prop = n / sum(n),
exp = "In Lab") %>%
left_join(M)
l1.props
Plot.
```{r, echo=F}
ggplot(l1.props, aes(x=factor(w.ans.cat), y=prop, fill=sample)) +
geom_bar(stat="identity", position=position_dodge()) +
geom_linerange(aes(ymin=ciwl,ymax=ciul), position=position_dodge(.9)) +
ylim(0,1) +
ylab("Prop. participants showing \ngeneralization pattern") +
xlab("Generalization pattern") +
ggtitle("In Lab") +
themeML +
theme(legend.position=c(.85,.8)) +
scale_fill_discrete(name="Sampling\nCondition")
```
Stats
```{r}
l1_tab = table(l1$w.ans.cat, l1$Answer.sample)[c("sub", "basic"),]
chisq.test(l1_tab)
```
Stats
```{r}
l1_tab = table(l1$w.ans.cat, l1$sample)[c("sub", "basic"),]
chisq.test(l1_tab)
```
summary(l1)
l1 <- colwise(as.factor)(l1)
summary(l1)
l1.exclusion.ns = l1 %>%
summarise(n_badTraining = length(which(t2_a == 0 | t3_a == 0 | t2_b == 0 | t2_b == 0)))
l1.exclusion.ns
l1.exclusion.ns = l1 %>%
summarise(n_badTraining = length(which(t2_a == 0 | t3_a == 0 | t2_b == 0 | t2_b == 0)))
l1.exclusion.ns
# subset data
l1.f = l1 %>%
filter(t2_a == 1 & t3_a == 1 & t2_b == 1 & t2_b == 1)
dim(l2)[1] # total
dim(tl.f)[1] # total with exclusions
```
```
dim(l1)[1] # total
dim(l1.f)[1] # total with exclusions
```
```{r, echo = F}
ggplot(l1.props, aes(x=factor(w.ans.cat), y=prop, fill=sample)) +
geom_bar(stat="identity", position=position_dodge()) +
geom_linerange(aes(ymin=ciwl,ymax=ciul), position=position_dodge(.9)) +
ylim(0,1) +
ylab("Prop. participants showing \ngeneralization pattern") +
xlab("Generalization pattern") +
ggtitle("In Lab") +
themeML +
theme(legend.position=c(.85,.8)) +
scale_fill_discrete(name="Sampling\nCondition")
```
Stats
```{r}
l1_tab = table(l1$w.ans.cat, l1$sample)[c("sub", "basic"),]
chisq.test(l1_tab)
```
Read in data and pre-process
```{r, echo = F}
t2 <- read.csv("../data/turk_replication_2.csv",sep="\t",header=T)
t2  <- t2 [,c(-1:-19,-21:-32,-36,-41:-43,-54:-55,-56)] # remove unnecessary columns
# make factors
t2$Answer.sample <- factor(t2$Answer.sample, labels=c('teacher','learner')) # sample0 = teacher, sample1=learner
t2 <- colwise(as.factor)(t2)
```
Filter.
```{r}
# get number of exclusions by category
t2.exclusion.ns = t2 %>%
summarise(n_badTraining = length(which(Answer.click1 != "\"correct\"" | Answer.click2 != "\"correct\"")),
n_badGeneralize = length(which(Answer.Qcheck1 != 0 | Answer.Qcheck2 != 0)),
n_badFilter = length(which(Answer.question3 != 'TRUE' | Answer.question4 !='TRUE')))
t2.exclusion.ns
# subset data
t2.f = t2 %>%
filter(Answer.click1 == "\"correct\"" &
Answer.click2 == "\"correct\"") %>% # take out those who click on wrong training items
filter(Answer.Qcheck1 == 0 & Answer.Qcheck2 == 0) %>% # take out if missed check generalization question
filter(Answer.question3 == 'TRUE' & Answer.question4 =='TRUE')  # take out those who missed filter question
dim(t2)[1] # total
dim(t2.f)[1] # total with exclusions
```
Categorize response patterns based on criterion.
```{r}
sub <-  t2.f$Answer.Qproper1 == 1 & t2.f$Answer.Qproper2 == 1 &
t2.f$Answer.Qproper3 == 1 & t2.f$Answer.Qsub1 == 1 &
t2.f$Answer.Qsub2 == 1 & t2.f$Answer.Qbasic1 == 0 &
t2.f$Answer.Qbasic2 == 0 & t2.f$Answer.Qbasic3 == 0
basic <- t2.f$Answer.Qproper1 == 1 & t2.f$Answer.Qproper2 == 1 &
t2.f$Answer.Qproper3 == 1 & t2.f$Answer.Qsub1 == 1 &
t2.f$Answer.Qsub2 == 1 & t2.f$Answer.Qbasic1 == 1 &
t2.f$Answer.Qbasic2 == 1 & t2.f$Answer.Qbasic3 == 1
t2.f$w.ans.cat <- "other"
t2.f$w.ans.cat[sub] <- "sub"
t2.f$w.ans.cat[basic] <- "basic"
t2.f$w.ans.cat <- "other"
summary(t2.f)
```
<a name="t2"/>
<h3> Turk Replication #2 </h3>
Read in data and pre-process
```{r, echo = F}
t2 <- read.csv("../data/turk_replication_2.csv",sep="\t",header=T)
t2  <- t2 [,c(-1:-19,-21:-32,-36,-41:-43,-54:-55,-56)] # remove unnecessary columns
# make factors
t2$Answer.sample <- factor(t2$Answer.sample, labels=c('teacher','learner')) # sample0 = teacher, sample1=learner
t2 <- colwise(as.factor)(t2)
```
Filter.
```{r}
# get number of exclusions by category
t2.exclusion.ns = t2 %>%
summarise(n_badTraining = length(which(Answer.click1 != "\"correct\"" | Answer.click2 != "\"correct\"")),
n_badGeneralize = length(which(Answer.Qcheck1 != 0 | Answer.Qcheck2 != 0)),
n_badFilter = length(which(Answer.question3 != 'TRUE' | Answer.question4 !='TRUE')))
t2.exclusion.ns
# subset data
t2.f = t2 %>%
filter(Answer.click1 == "\"correct\"" &
Answer.click2 == "\"correct\"") %>% # take out those who click on wrong training items
filter(Answer.Qcheck1 == 0 & Answer.Qcheck2 == 0) %>% # take out if missed check generalization question
filter(Answer.question3 == 'TRUE' & Answer.question4 =='TRUE')  # take out those who missed filter question
dim(t2)[1] # total
dim(t2.f)[1] # total with exclusions
```
summary(t2.f)
t2.f$w.ans.cat <- "other"
t2.f$w.ans.cat
t2.f$w.ans.cat = "other"
summary(t2.f)
names(t2.f)
t2.f$as = 1
t2.f$as = "1"
t2.f$as <- NA
```{r include = F}
rm(list = ls())
#--Load packages--
library(knitr)
library(boot)
library(ggplot2)
library(plyr)
library(dplyr)
# graphical parameters
fs = 18
ts = 20
get.prop.CIs <- function(d, dv){
prop = sum(d==dv)/length(d)
# bootstrap across subject proportion responses for each category
b <- boot(d, function(u, i) table(u[i])[dv]/length(u), R = 1000)
ci <- boot.ci(b, type = "perc")
ciwl = ci$percent[4]
ciwu = ci$percent[5]
p.CIS <- data.frame(ciwl = ciwl, ciul = ciwu, w.ans.cat = dv, ps.boot = prop)
return (p.CIS)
}
theme_set(theme_bw())
themeML = theme(text = element_text(size=fs),
plot.title=element_text(size=ts, face = "bold"),
plot.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
axis.line = element_line(color = 'black'))
d.fc <- function(response, cond) {
# http://www.meta-analysis.com/downloads/Meta-analysis%20Converting%20among%20effect%20sizes.pdf
#https://www.medcalc.net/tests/odds_ratio.php
response = droplevels(response)
response<- ordered(response, levels = c( "basic", "sub"))
cond <- ordered(cond, levels = c( "learner", "teacher"))
#use odds ratioto calculate d
ns = table(cond, response)
or = (ns[1]*ns[4])/(ns[2]*ns[3])
cf = sqrt(3)/pi
effect_size = log(or) * cf #calculate d
#effect_size = log(or)  #calculate d
# caluclate 95 CI
se = sqrt((1/ns[1]) + (1/ns[2]) + (1/ns[3]) + (1/ns[4])) # calculate se of log odds ratio
d_se = se * (3/(pi^2)) # caclulate se of
d_err = d_se*1.96
#d_err = se*1.96
cill = effect_size - d_err
ciul = effect_size + d_err
es <- data.frame(effect_size=effect_size,
cill = cill,
ciul = ciul
)
return (es)
}
opts_chunk$set(echo=T, message=F, warning=F, error=F, cache=F)
# include proper generalizations?
proper = T
```
Read in data and pre-process
```{r, echo = F}
t2 <- read.csv("../data/turk_replication_2.csv", sep="\t", header=T)
t2  <- t2 [,c(-1:-19,-21:-32,-36,-41:-43,-54:-55,-56)] # remove unnecessary columns
# make factors
t2$Answer.sample <- factor(t2$Answer.sample, labels=c('teacher','learner')) # sample0 = teacher, sample1=learner
t2 <- colwise(as.factor)(t2)
```
Filter.
```{r}
# get number of exclusions by category
t2.exclusion.ns = t2 %>%
summarise(n_badTraining = length(which(Answer.click1 != "\"correct\"" | Answer.click2 != "\"correct\"")),
n_badGeneralize = length(which(Answer.Qcheck1 != 0 | Answer.Qcheck2 != 0)),
n_badFilter = length(which(Answer.question3 != 'TRUE' | Answer.question4 !='TRUE')))
t2.exclusion.ns
# subset data
t2.f = t2 %>%
filter(Answer.click1 == "\"correct\"" &
Answer.click2 == "\"correct\"") %>% # take out those who click on wrong training items
filter(Answer.Qcheck1 == 0 & Answer.Qcheck2 == 0) %>% # take out if missed check generalization question
filter(Answer.question3 == 'TRUE' & Answer.question4 =='TRUE')  # take out those who missed filter question
dim(t2)[1] # total
dim(t2.f)[1] # total with exclusions
```
Categorize response patterns based on criterion.
```{r}
sub <-  t2.f$Answer.Qproper1 == 1 & t2.f$Answer.Qproper2 == 1 &
t2.f$Answer.Qproper3 == 1 & t2.f$Answer.Qsub1 == 1 &
t2.f$Answer.Qsub2 == 1 & t2.f$Answer.Qbasic1 == 0 &
t2.f$Answer.Qbasic2 == 0 & t2.f$Answer.Qbasic3 == 0
basic <- t2.f$Answer.Qproper1 == 1 & t2.f$Answer.Qproper2 == 1 &
t2.f$Answer.Qproper3 == 1 & t2.f$Answer.Qsub1 == 1 &
t2.f$Answer.Qsub2 == 1 & t2.f$Answer.Qbasic1 == 1 &
t2.f$Answer.Qbasic2 == 1 & t2.f$Answer.Qbasic3 == 1
t2.f$w.ans.cat = "other"
summary(t2.f)
Read in data and pre-process
```{r, echo = F}
t2 <- read.csv("../data/turk_replication_2.csv", sep="\t", header=T)
t2  <- t2 [,c(-1:-19,-21:-32,-36,-41:-43,-54:-55,-56)] # remove unnecessary columns
# make factors
t2$Answer.sample <- factor(t2$Answer.sample, labels=c('teacher','learner')) # sample0 = teacher, sample1=learner
Filter.
```{r}
# get number of exclusions by category
t2.exclusion.ns = t2 %>%
summarise(n_badTraining = length(which(Answer.click1 != "\"correct\"" |
Answer.click2 != "\"correct\"")),
n_badGeneralize = length(which(Answer.Qcheck1 != 0 | Answer.Qcheck2 != 0)),
n_badFilter = length(which(Answer.question3 != 'TRUE' | Answer.question4 !='TRUE')))
t2.exclusion.ns
# subset data
t2.f = t2 %>%
filter(Answer.click1 == "\"correct\"" &
Answer.click2 == "\"correct\"") %>% # take out those who click on wrong training items
filter(Answer.Qcheck1 == 0 & Answer.Qcheck2 == 0) %>% # take out if missed check generalization question
filter(Answer.question3 == 'TRUE' & Answer.question4 =='TRUE')  # take out those who missed filter question
dim(t2)[1] # total
dim(t2.f)[1] # total with exclusions
```{r}
sub <-  t2.f$Answer.Qproper1 == 1 & t2.f$Answer.Qproper2 == 1 &
t2.f$Answer.Qproper3 == 1 & t2.f$Answer.Qsub1 == 1 &
t2.f$Answer.Qsub2 == 1 & t2.f$Answer.Qbasic1 == 0 &
t2.f$Answer.Qbasic2 == 0 & t2.f$Answer.Qbasic3 == 0
basic <- t2.f$Answer.Qproper1 == 1 & t2.f$Answer.Qproper2 == 1 &
t2.f$Answer.Qproper3 == 1 & t2.f$Answer.Qsub1 == 1 &
t2.f$Answer.Qsub2 == 1 & t2.f$Answer.Qbasic1 == 1 &
t2.f$Answer.Qbasic2 == 1 & t2.f$Answer.Qbasic3 == 1
t2.f$w.ans.cat = "other"
w.ans.cat
t2.f$w.ans.cat <- "other"
